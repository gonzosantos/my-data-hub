import { visit, print, stripIgnoredCharacters, separateOperations, Kind, } from 'graphql';
import sortBy from 'lodash.sortby';
export function normalizeOperation({ document, operationName, hideLiterals = true, removeAliases = true, }) {
    var _a, _b;
    return stripIgnoredCharacters(print(visit(dropUnusedDefinitions(document, operationName !== null && operationName !== void 0 ? operationName : (_b = (_a = document.definitions.find(isOperationDef)) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.value), {
        // hide literals
        IntValue(node) {
            return hideLiterals ? Object.assign(Object.assign({}, node), { value: '0' }) : node;
        },
        FloatValue(node) {
            return hideLiterals ? Object.assign(Object.assign({}, node), { value: '0' }) : node;
        },
        StringValue(node) {
            return hideLiterals ? Object.assign(Object.assign({}, node), { value: '', block: false }) : node;
        },
        Field(node) {
            return Object.assign(Object.assign({}, node), { 
                // remove aliases
                alias: removeAliases ? undefined : node.alias, 
                // sort arguments
                arguments: sortNodes(node.arguments) });
        },
        Document(node) {
            return Object.assign(Object.assign({}, node), { definitions: sortNodes(node.definitions) });
        },
        OperationDefinition(node) {
            return Object.assign(Object.assign({}, node), { variableDefinitions: sortNodes(node.variableDefinitions) });
        },
        SelectionSet(node) {
            return Object.assign(Object.assign({}, node), { selections: sortNodes(node.selections) });
        },
        FragmentSpread(node) {
            return Object.assign(Object.assign({}, node), { directives: sortNodes(node.directives) });
        },
        InlineFragment(node) {
            return Object.assign(Object.assign({}, node), { directives: sortNodes(node.directives) });
        },
        FragmentDefinition(node) {
            return Object.assign(Object.assign({}, node), { directives: sortNodes(node.directives), variableDefinitions: sortNodes(node.variableDefinitions) });
        },
        Directive(node) {
            return Object.assign(Object.assign({}, node), { arguments: sortNodes(node.arguments) });
        },
    })));
}
function sortNodes(nodes) {
    if (nodes) {
        if (nodes.length === 0) {
            return [];
        }
        if (isOfKindList(nodes, Kind.DIRECTIVE)) {
            return sortBy(nodes, 'name.value');
        }
        if (isOfKindList(nodes, Kind.VARIABLE_DEFINITION)) {
            return sortBy(nodes, 'variable.name.value');
        }
        if (isOfKindList(nodes, Kind.ARGUMENT)) {
            return sortBy(nodes, 'name.value');
        }
        if (isOfKindList(nodes, [Kind.FIELD, Kind.FRAGMENT_SPREAD, Kind.INLINE_FRAGMENT])) {
            return sortBy(nodes, 'kind', 'name.value');
        }
        return sortBy(nodes, 'kind', 'name.value');
    }
    return;
}
function isOfKindList(nodes, kind) {
    return typeof kind === 'string' ? nodes[0].kind === kind : kind.includes(nodes[0].kind);
}
function isOperationDef(def) {
    return def.kind === Kind.OPERATION_DEFINITION;
}
function dropUnusedDefinitions(doc, operationName) {
    var _a;
    if (!operationName) {
        return doc;
    }
    return (_a = separateOperations(doc)[operationName]) !== null && _a !== void 0 ? _a : doc;
}
